; Atoms
(def '(nil) '())
(def '(true) 1)
(def '(false) 0)


; Function declaration
(def '(fn) (\ '(f b) '(
    def (head f) (\ (tail f) b) )))

; Currying
(fn '(curry f l) '(eval (join (list f) l)))
(fn '(uncurry f : xs) '(f xs))

; List functions
(fn '(cons x l)
    '(join (list x) l))

(fn '(len l)
    '(if (== l nil)
        '(0)
        '((+ (len (tail l)) 1))))

(fn '(pop l)
    '(if (> (len l) 1)
        '(join (head l) (pop (tail l)))
        '(nil)))

(fn '(last l)
    '(if (> (len l) 1)
        '(last (tail l))
        '(l)))

(fn '(nth n l)
    '(if (n)
        '(nth (- n 1) (tail l))
        '(head l)))

(fn '(drop n l)
    '(if (n)
        '(drop (- n 1) (tail l))
        '(l)))

(fn '(take n l)
    '(if (n)
        '(join (head l) (take (- n 1) (tail l)))
        '(nil)))

(fn '(elem x l)
    '(if (== l nil)
        '(false)
        '(if (== (list x) (head l))
            '(true)
            '(elem x (tail l)))))

; shortcuts
(fn '(fst l) '(eval (head l)) )
(fn '(snd l) '(eval (head (tail l))) )
(fn '(trd l) '(eval (head (tail (tail l)))))

; Function application
(fn '(map f l)
    '(if (== l nil)
        '(nil)
        '(cons (curry f (head l)) (map f (tail l)))))

(fn '(filter f l)
    '(if (== l nil)
        '(nil)
        '(join
            (if (curry f (head l))
                '(head l)
                '(nil))
            (filter f (tail l)))))

; Sequential evaluation
(fn '(do : l)
    '(if (== l nil)
        '(nil)
        '(last l)))

; Open new scope
(fn '(let b)
    '(((\ '(_) b) ())))

; Logical operations
(fn '(not x)
    '(if (x) '(false) '(true)
))

(fn '(all x : xs)
    '(if (x)
        '(if (== xs nil)
            '(true)
            '(curry all xs))
    '(false)))

(fn '(any x : xs)
    '(if (x)
        '(true)
        '(if (== xs nil)
            '(false)
            '(curry any xs))))

; Misc functions
(fn '(flip f a b) '(f b a))
(fn '(comp f g x) '(f (g x)))


; Conditionals
(def '(otherwise) true)

(fn '(select : xs)
    '(if (== xs nil)
        '(error "No Selection Found")
        '(if (fst (fst xs))
            '(snd (fst xs))
            '(curry select (tail xs)))))

(fn '(case x : xs)
    '(if (== xs nil)
        '(error "No Case Found")
        '(if (== x (fst (fst xs)))
            '(snd (fst xs))
            '(curry case (cons x (tail xs))))))

